#!/usr/bin/env python3

#!/usr/bin/env python3
import subprocess
import yaml
import argparse

def get_top_keys(file_path):
    """Read the top-level keys from a YAML file."""
    with open(file_path, 'r') as f:
        data = yaml.safe_load(f)
    return list(data.keys())

def get_value_for_key(file_path, key):
    """Extract the subtree for a given key using dasel.
    
    Uses the working convention: dasel -f <file> -r yaml -s <path>
    """
    cmd = ["dasel", "-f", file_path, "-r", "yaml", "-s", key]
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Error reading key {key}: {result.stderr}")
    return result.stdout.strip()

def key_exists(manifest_file, key):
    """Check if a key exists in the target manifest using dasel.
    
    Uses the same convention as reading.
    """
    cmd = ["dasel", "-f", manifest_file, "-r", "yaml", "-s", key]
    result = subprocess.run(cmd, capture_output=True, text=True)
    return result.returncode == 0

def update_manifest(manifest_file, values_file):
    """Perform a diff of the top-level keys between the values file and manifest.
    
    For each key in the values file:
      - If the key exists in the manifest, it's a 'replace'
      - If not, it's an 'insert'
      
    Both operations are executed using 'dasel put' with the convention:
      dasel put -f <manifest_file> -r yaml -s <key> -v <new_value>
    """
    values_keys = get_top_keys(values_file)

    print("values_keys are: ", values_keys)

    for key in values_keys:

        print("checking key: ", key)
        # Retrieve the subtree for the key from the values file.
        new_value = get_value_for_key(values_file, key)
        
        if key_exists(manifest_file, key):
            print(f"Replacing key with put (precise value replacement): {key}")
        else:
            print(f"Inserting key with put (insert entire block): {key}")
        
        cmd = ["dasel", "put", "-f", manifest_file, "-r", "yaml", "-s", key, "-v", new_value]
        subprocess.run(cmd, check=True)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Wrapper tool for dasel to update/insert YAML values into a manifest"
    )
    parser.add_argument('subcommand', choices=['put'],
                        help="Subcommand: 'put' (currently the only supported action)")
    parser.add_argument('values_file',
                        help="Relative (or absolute) path to the values YAML file (e.g. ./repo/values/manifest-01-values.yaml)")
    parser.add_argument('manifest_file',
                        help="Relative (or absolute) path to the target manifest YAML file (e.g. ./repo/manifest-01/manifest.yaml)")
    args = parser.parse_args()
    
    if args.subcommand == 'put':
        update_manifest(args.manifest_file, args.values_file)
