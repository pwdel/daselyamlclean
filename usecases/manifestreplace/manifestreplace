#!/usr/bin/env python3

import subprocess
import yaml
import argparse
import shutil
import os

def dasel_put(manifest_file, selector, value, dump_value=True):
    """
    Helper function to run a dasel put command.
    If dump_value is True, the value is converted to YAML via yaml.dump,
    otherwise it is used directly.
    """
    if dump_value:
        value_str = yaml.dump(value, default_flow_style=False).strip()
    else:
        value_str = str(value)
    cmd = [
        "dasel", 
        "put", 
        "--file", manifest_file, 
        "--read", "yaml", 
        "--selector", selector,
        "--type", "yaml",
        "--value", value_str,
        "--write", "yaml",
    ]
    subprocess.run(cmd, check=True)


def insert_entire_subtree(manifest_file, top_key, rep_val):
    """Insert an entire subtree when the top-level key is missing in the manifest."""
    dasel_put(manifest_file, top_key, rep_val)


def replace_item_in_list(manifest_file, top_key, manifest_list, rep_list):
    """
    For a top-level key whose value is a list, iterate over the replacement list.
    For each dictionary item in the replacement list, update matching keys in the manifest list.
    """
    for rep_item in rep_list:
        if isinstance(rep_item, dict):
            for sub_key, new_value in rep_item.items():
                updated = False
                for idx, element in enumerate(manifest_list):
                    if isinstance(element, dict) and sub_key in element:
                        path = f"{top_key}.[{idx}].{sub_key}"
                        dasel_put(manifest_file, path, new_value)
                        updated = True
                if not updated:
                    print(f"Warning: Key '{sub_key}' not found in any element of list under '{top_key}'")
        else:
            print(f"Warning: Expected a dictionary in list for key '{top_key}', got: {rep_item}")


def replace_value_in_dict(manifest_file, top_key, rep_val_dict):
    """
    For a top-level key whose replacement value is a dict,
    update each nested key in the manifest.
    """
    for sub_key, new_value in rep_val_dict.items():
        path = f"{top_key}.{sub_key}"
        dasel_put(manifest_file, path, new_value)


def replace_scalar(manifest_file, top_key, rep_val):
    """Update a top-level scalar value in the manifest."""
    dasel_put(manifest_file, top_key, rep_val, dump_value=False)


def update_manifest(manifest_file, values_file):
    """
    Update the manifest with replacement values from the values file.
    
    For each top-level key:
      - Insert the entire subtree if the key doesn't exist.
      - If it exists:
          - If the replacement value is a list, update each matching item by index.
          - If it's a dict, update each nested key.
          - If it's a scalar, replace the entire key.
    """
    with open(values_file, 'r') as f:
        replacements = yaml.safe_load(f)

    with open(manifest_file, 'r') as f:
        manifest_data = yaml.safe_load(f)

    for top_key, rep_val in replacements.items():

        if top_key not in manifest_data:
            insert_entire_subtree(manifest_file, top_key, rep_val)
        else:
            print(f"top_key {top_key} is in manifest_data.")
            manifest_val = manifest_data[top_key]
            if isinstance(rep_val, list):
                if isinstance(manifest_val, list):
                    replace_item_in_list(manifest_file, top_key, manifest_val, rep_val)
                else:
                    print(f"Error: Expected a list in manifest for key '{top_key}' but found {type(manifest_val)}")
            elif isinstance(rep_val, dict):
                replace_value_in_dict(manifest_file, top_key, rep_val)
            else:
                replace_scalar(manifest_file, top_key, rep_val)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Wrapper tool for dasel to update/insert YAML values into a manifest"
    )
    parser.add_argument('subcommand', choices=['put'],
                        help="Subcommand: 'put' (currently the only supported action)")
    parser.add_argument('values_file',
                        help="Relative or absolute path to the values YAML file (e.g. ./repo/values/manifest-01-values.yaml)")
    parser.add_argument('manifest_file',
                        help="Relative or absolute path to the target manifest YAML file (e.g. ./repo/manifest-01/manifest.yaml)")
    args = parser.parse_args()
    
    if args.subcommand == 'put':
        backup_file = args.manifest_file + ".backup"

        if os.path.exists(backup_file):
            os.remove(backup_file)
            print(f"Deleted existing backup file: {backup_file}")
        shutil.copy2(args.manifest_file, backup_file)
        print(f"Created backup file: {backup_file}")
        
        update_manifest(args.manifest_file, args.values_file)
        
        diff_cmd = ["diff", backup_file, args.manifest_file]
        diff_result = subprocess.run(diff_cmd, capture_output=True, text=True)
        
        print("Diff between backup and updated manifest:")
        if diff_result.stdout:
            print(diff_result.stdout)
        else:
            print("No differences found.")
        
        if os.path.exists(backup_file):
            os.remove(backup_file)
            print(f"Deleted backup file: {backup_file}")
