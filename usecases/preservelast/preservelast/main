#!/usr/bin/env python3

import argparse
from filereadwrite.create_backup import create_backup
from date_helper.date_helper import update_dates_in_data
from yaml_toplevel.yaml_toplevel import get_toplevel_inserts_keys, determine_key_contents
from yaml_list_helpers.yaml_list_helpers import get_last_list_index_for_key, get_list_item_key_values
from yaml_dict_helpers.yaml_dict_helpers import get_dict_item_key_values
from filereadwrite.file_indicies import find_yaml_block_indices_for_all
from filereadwrite.string_write import insert_combined_updated_blocks

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="YAML update tool")
    parser.add_argument('subcommand', choices=['put'],
                        help="Subcommand: 'put' (currently the only supported action)")
    parser.add_argument('manifest_file',
                        help="Path to the target manifest YAML file (e.g. repo/manifest-01/manifest.yaml)")
    parser.add_argument('--replacements_dir',
                        help="Directory containing updates (not used in this minimal example)")
    args = parser.parse_args()

    if not args.manifest_file:
        print("Error: manifest_file must be provided")
        exit(1)

    if not args.replacements_dir:
        print("Error: --replacements_dir must be provided")
        exit(1)

    backup_file = create_backup(args.manifest_file)

    inserts_file = args.replacements_dir + '/inserts.yaml'
    inserts_keys = get_toplevel_inserts_keys(inserts_file)

    updates_file = args.replacements_dir + '/updates.yaml'
    print(f"updates_file: {updates_file}")
    updates_keys = get_toplevel_inserts_keys(updates_file)
    print(f"updates_keys: {updates_keys}")

    keys_with_list_as_values, keys_with_dict_as_values = determine_key_contents(args.manifest_file, inserts_keys)
    print(f"keys_with_list_as_values {keys_with_list_as_values}")
    print(f"keys_with_dict_as_values {keys_with_dict_as_values}")

    # Updating Lists
    counts = get_last_list_index_for_key(args.manifest_file, keys_with_list_as_values)
    print("Last index for list under key, counts:", counts)
    list_item_key_values = get_list_item_key_values(args.manifest_file, counts)
    print(f"list_item_key_values: {list_item_key_values}")
    updated_list_dates = update_dates_in_data(list_item_key_values)
    print(f"updated_list_dates: {updated_list_dates}")

    print(f"keys_with_dict_as_values: {keys_with_dict_as_values}")
    # mirroring what we have above, we need a way to put all lines for a given key into lists
    dict_item_key_values = get_dict_item_key_values(args.manifest_file, keys_with_dict_as_values)
    print(f"dict_item_key_values: {dict_item_key_values}")
    # ok now that we have it in the proper format, update dates
    updated_dict_dates = update_dates_in_data(dict_item_key_values)
    print(f"updated_dict_dates: {updated_dict_dates}")


    combined_updated_dates = {**updated_list_dates, **updated_dict_dates}
    print(f"combined_updated_dates: {combined_updated_dates}")

    both_lines_snapshot, combined_block_indicies = find_yaml_block_indices_for_all(args.manifest_file, combined_updated_dates)
    print(f"both_lines_snapshot: {both_lines_snapshot}")
    print(f"combined_block_indicies: {combined_block_indicies}")

    list_lines_snapshot, list_block_indicies = find_yaml_block_indices_for_all(args.manifest_file, updated_list_dates)
    print(f"list_block_indicies: {list_block_indicies}")

    # testing to see if we can use updated_dict_dates to get the block indicies
    dict_lines_snapshot, dict_block_indicies = find_yaml_block_indices_for_all(args.manifest_file, updated_dict_dates)
    print(f"dict_block_indicies: {dict_block_indicies}")


    # the below works and can be used in insert_updated blocks
    # yaml_str = dict_item_to_yaml_str(updated_dict_dates)
    # print(yaml_str)

    # print(insert_input_str_lines(lines_snapshot, updated_data['whateverThing'], end_index))
    # print(insert_updated_blocks(both_lines_snapshot, list_block_indicies, updated_list_dates))

    # draft function signature
    print(insert_combined_updated_blocks(
        both_lines_snapshot, 
        combined_block_indicies, 
        combined_updated_dates,
        keys_with_list_as_values,
        keys_with_dict_as_values
    ))

    # At the end, when we do insert_updated_blocks we are going to have to input both list types and dict types
    # updated_list_dates
    # updated_dict_dates
    # and then, probably based upon the function signature, we are going to have to update them appropriately.
    # this means find_yaml_block_indicies_for_all is probably different for both dict and list inputs...?